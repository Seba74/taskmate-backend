generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(cuid())
  name            String
  last_name       String
  profile_picture String         @default("default_picture.webp")
  email           String         @unique
  password        String
  status          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  collaborators   Collaborator[]
}

model Project {
  id              String         @id @default(cuid())
  title           String
  description     String
  project_picture String         @default("default_picture.webp")
  status          Boolean        @default(true)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  collaborators   Collaborator[]
  tasks           Task[]
}

model Role {
  id            String         @id @default(cuid())
  description   String         @unique
  status        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  collaborators Collaborator[]
}

model Collaborator {
  id                   String                 @id @default(cuid())
  project              Project                @relation(fields: [projectId], references: [id])
  role                 Role                   @relation(fields: [roleId], references: [id])
  user                 User                   @relation(fields: [userId], references: [id])
  projectId            String
  userId               String
  roleId               String
  status               Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  collaboratorsOnTasks CollaboratorsOnTasks[]
  comments             Comments[]
}

model TaskStatus {
  id          String   @id @default(cuid())
  description String
  status      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  tasks       Task[]
}

model TaskResourceType {
  id            String         @id @default(cuid())
  description   String         @unique
  status        Boolean        @default(true)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  taskResources TaskResource[]
}

model TaskResource {
  id                 String           @id @default(cuid())
  taskResourceType   TaskResourceType @relation(fields: [taskResourceTypeId], references: [id])
  task               Task             @relation(fields: [taskId], references: [id])
  taskResourceTypeId String
  taskId             String
  description        String
  status             Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
}

model Task {
  id                   String                 @id @default(cuid())
  project              Project                @relation(fields: [projectId], references: [id])
  taskStatus           TaskStatus             @relation(fields: [taskStatusId], references: [id])
  description          String
  startDate           DateTime
  endDate             DateTime
  status               Boolean                @default(true)
  projectId            String
  taskStatusId         String
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  collaboratorsOnTasks CollaboratorsOnTasks[]
  comments             Comments[]
  taskResources        TaskResource[]
}

model CollaboratorsOnTasks {
  id             String       @id @default(cuid())
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  task           Task         @relation(fields: [taskId], references: [id])
  collaboratorId String
  taskId         String
  status         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Comments {
  id             String       @id @default(cuid())
  task           Task         @relation(fields: [taskId], references: [id])
  collaborator   Collaborator @relation(fields: [collaboratorId], references: [id])
  comment        String
  taskId         String
  collaboratorId String
  status         Boolean      @default(true)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}
